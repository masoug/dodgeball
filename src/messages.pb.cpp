// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NetProtocol {

namespace {

const ::google::protobuf::Descriptor* Vector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerConfirmation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerConfirmation_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerState_reflection_ = NULL;
const ::google::protobuf::Descriptor* BallState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BallState_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameState_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpawnBall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpawnBall_reflection_ = NULL;
const ::google::protobuf::Descriptor* FieldEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FieldEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FieldEvent_EventType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetPacket_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NetPacket_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2eproto() {
  protobuf_AddDesc_messages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages.proto");
  GOOGLE_CHECK(file != NULL);
  Vector3_descriptor_ = file->message_type(0);
  static const int Vector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, z_),
  };
  Vector3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector3_descriptor_,
      Vector3::default_instance_,
      Vector3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector3));
  PlayerRequest_descriptor_ = file->message_type(1);
  static const int PlayerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRequest, name_),
  };
  PlayerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerRequest_descriptor_,
      PlayerRequest::default_instance_,
      PlayerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerRequest));
  PlayerConfirmation_descriptor_ = file->message_type(2);
  static const int PlayerConfirmation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerConfirmation, id_),
  };
  PlayerConfirmation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerConfirmation_descriptor_,
      PlayerConfirmation::default_instance_,
      PlayerConfirmation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerConfirmation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerConfirmation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerConfirmation));
  PlayerState_descriptor_ = file->message_type(3);
  static const int PlayerState_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, possession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, targetvelocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, avatar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, team_type_),
  };
  PlayerState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerState_descriptor_,
      PlayerState::default_instance_,
      PlayerState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerState));
  BallState_descriptor_ = file->message_type(4);
  static const int BallState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallState, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallState, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallState, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallState, isactive_),
  };
  BallState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BallState_descriptor_,
      BallState::default_instance_,
      BallState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BallState));
  GameState_descriptor_ = file->message_type(5);
  static const int GameState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, player_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, redpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, bluepoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, ball_state_),
  };
  GameState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameState_descriptor_,
      GameState::default_instance_,
      GameState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameState));
  PlayerEvent_descriptor_ = file->message_type(6);
  static const int PlayerEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEvent, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEvent, targetvelocity_),
  };
  PlayerEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerEvent_descriptor_,
      PlayerEvent::default_instance_,
      PlayerEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerEvent));
  SpawnBall_descriptor_ = file->message_type(7);
  static const int SpawnBall_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpawnBall, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpawnBall, impulse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpawnBall, position_),
  };
  SpawnBall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpawnBall_descriptor_,
      SpawnBall::default_instance_,
      SpawnBall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpawnBall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpawnBall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpawnBall));
  FieldEvent_descriptor_ = file->message_type(8);
  static const int FieldEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldEvent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldEvent, player_event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldEvent, spawn_ball_),
  };
  FieldEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FieldEvent_descriptor_,
      FieldEvent::default_instance_,
      FieldEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FieldEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FieldEvent));
  FieldEvent_EventType_descriptor_ = FieldEvent_descriptor_->enum_type(0);
  Error_descriptor_ = file->message_type(9);
  static const int Error_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, errormsg_),
  };
  Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Error_descriptor_,
      Error::default_instance_,
      Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Error));
  NetPacket_descriptor_ = file->message_type(10);
  static const int NetPacket_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetPacket, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetPacket, vector3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetPacket, player_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetPacket, player_confirmation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetPacket, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetPacket, game_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetPacket, field_event_),
  };
  NetPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetPacket_descriptor_,
      NetPacket::default_instance_,
      NetPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetPacket));
  NetPacket_Type_descriptor_ = NetPacket_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector3_descriptor_, &Vector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerRequest_descriptor_, &PlayerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerConfirmation_descriptor_, &PlayerConfirmation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerState_descriptor_, &PlayerState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BallState_descriptor_, &BallState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameState_descriptor_, &GameState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerEvent_descriptor_, &PlayerEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpawnBall_descriptor_, &SpawnBall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FieldEvent_descriptor_, &FieldEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Error_descriptor_, &Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetPacket_descriptor_, &NetPacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2eproto() {
  delete Vector3::default_instance_;
  delete Vector3_reflection_;
  delete PlayerRequest::default_instance_;
  delete PlayerRequest_reflection_;
  delete PlayerConfirmation::default_instance_;
  delete PlayerConfirmation_reflection_;
  delete PlayerState::default_instance_;
  delete PlayerState_reflection_;
  delete BallState::default_instance_;
  delete BallState_reflection_;
  delete GameState::default_instance_;
  delete GameState_reflection_;
  delete PlayerEvent::default_instance_;
  delete PlayerEvent_reflection_;
  delete SpawnBall::default_instance_;
  delete SpawnBall_reflection_;
  delete FieldEvent::default_instance_;
  delete FieldEvent_reflection_;
  delete Error::default_instance_;
  delete Error_reflection_;
  delete NetPacket::default_instance_;
  delete NetPacket_reflection_;
}

void protobuf_AddDesc_messages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016messages.proto\022\013NetProtocol\"*\n\007Vector3"
    "\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \002(\001\"\035\n\rPla"
    "yerRequest\022\014\n\004name\030\001 \002(\t\" \n\022PlayerConfir"
    "mation\022\n\n\002id\030\001 \002(\r\"\264\001\n\013PlayerState\022\n\n\002id"
    "\030\001 \002(\r\022&\n\010position\030\002 \002(\0132\024.NetProtocol.V"
    "ector3\022\022\n\npossession\030\003 \002(\r\022,\n\016targetVelo"
    "city\030\004 \002(\0132\024.NetProtocol.Vector3\022\016\n\006avat"
    "ar\030\005 \001(\r\022\014\n\004name\030\006 \001(\t\022\021\n\tteam_type\030\007 \001("
    "\r\"y\n\tBallState\022\n\n\002id\030\001 \002(\r\022&\n\010position\030\002"
    " \002(\0132\024.NetProtocol.Vector3\022&\n\010velocity\030\003"
    " \002(\0132\024.NetProtocol.Vector3\022\020\n\010isActive\030\004"
    " \002(\010\"\216\001\n\tGameState\022.\n\014player_state\030\001 \003(\013"
    "2\030.NetProtocol.PlayerState\022\021\n\tredPoints\030"
    "\002 \002(\r\022\022\n\nbluePoints\030\003 \002(\r\022*\n\nball_state\030"
    "\004 \003(\0132\026.NetProtocol.BallState\"G\n\013PlayerE"
    "vent\022\n\n\002id\030\001 \002(\r\022,\n\016targetVelocity\030\002 \002(\013"
    "2\024.NetProtocol.Vector3\"f\n\tSpawnBall\022\n\n\002i"
    "d\030\001 \002(\r\022%\n\007impulse\030\002 \002(\0132\024.NetProtocol.V"
    "ector3\022&\n\010position\030\003 \002(\0132\024.NetProtocol.V"
    "ector3\"\310\001\n\nFieldEvent\022/\n\004type\030\001 \002(\0162!.Ne"
    "tProtocol.FieldEvent.EventType\022.\n\014player"
    "_event\030\002 \001(\0132\030.NetProtocol.PlayerEvent\022*"
    "\n\nspawn_ball\030\003 \001(\0132\026.NetProtocol.SpawnBa"
    "ll\"-\n\tEventType\022\020\n\014PLAYER_EVENT\020\001\022\016\n\nSPA"
    "WN_BALL\020\002\",\n\005Error\022\021\n\terrorCode\030\001 \002(\r\022\020\n"
    "\010errorMsg\030\002 \002(\t\"\276\003\n\tNetPacket\022)\n\004type\030\001 "
    "\002(\0162\033.NetProtocol.NetPacket.Type\022%\n\007vect"
    "or3\030\002 \001(\0132\024.NetProtocol.Vector3\0222\n\016playe"
    "r_request\030\003 \001(\0132\032.NetProtocol.PlayerRequ"
    "est\022<\n\023player_confirmation\030\004 \001(\0132\037.NetPr"
    "otocol.PlayerConfirmation\022!\n\005error\030\005 \001(\013"
    "2\022.NetProtocol.Error\022*\n\ngame_state\030\006 \001(\013"
    "2\026.NetProtocol.GameState\022,\n\013field_event\030"
    "\007 \001(\0132\027.NetProtocol.FieldEvent\"p\n\004Type\022\013"
    "\n\007VECTOR3\020\001\022\022\n\016PLAYER_REQUEST\020\002\022\027\n\023PLAYE"
    "R_CONFIRMATION\020\003\022\r\n\tERROR_PKT\020\004\022\016\n\nGAME_"
    "STATE\020\005\022\017\n\013FIELD_EVENT\020\006", 1464);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages.proto", &protobuf_RegisterTypes);
  Vector3::default_instance_ = new Vector3();
  PlayerRequest::default_instance_ = new PlayerRequest();
  PlayerConfirmation::default_instance_ = new PlayerConfirmation();
  PlayerState::default_instance_ = new PlayerState();
  BallState::default_instance_ = new BallState();
  GameState::default_instance_ = new GameState();
  PlayerEvent::default_instance_ = new PlayerEvent();
  SpawnBall::default_instance_ = new SpawnBall();
  FieldEvent::default_instance_ = new FieldEvent();
  Error::default_instance_ = new Error();
  NetPacket::default_instance_ = new NetPacket();
  Vector3::default_instance_->InitAsDefaultInstance();
  PlayerRequest::default_instance_->InitAsDefaultInstance();
  PlayerConfirmation::default_instance_->InitAsDefaultInstance();
  PlayerState::default_instance_->InitAsDefaultInstance();
  BallState::default_instance_->InitAsDefaultInstance();
  GameState::default_instance_->InitAsDefaultInstance();
  PlayerEvent::default_instance_->InitAsDefaultInstance();
  SpawnBall::default_instance_->InitAsDefaultInstance();
  FieldEvent::default_instance_->InitAsDefaultInstance();
  Error::default_instance_->InitAsDefaultInstance();
  NetPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2eproto {
  StaticDescriptorInitializer_messages_2eproto() {
    protobuf_AddDesc_messages_2eproto();
  }
} static_descriptor_initializer_messages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Vector3::kXFieldNumber;
const int Vector3::kYFieldNumber;
const int Vector3::kZFieldNumber;
#endif  // !_MSC_VER

Vector3::Vector3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector3::InitAsDefaultInstance() {
}

Vector3::Vector3(const Vector3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3::~Vector3() {
  SharedDtor();
}

void Vector3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3_descriptor_;
}

const Vector3& Vector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Vector3* Vector3::default_instance_ = NULL;

Vector3* Vector3::New() const {
  return new Vector3;
}

void Vector3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // required double z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // required double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // required double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Vector3::Swap(Vector3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3_descriptor_;
  metadata.reflection = Vector3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerRequest::kNameFieldNumber;
#endif  // !_MSC_VER

PlayerRequest::PlayerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerRequest::InitAsDefaultInstance() {
}

PlayerRequest::PlayerRequest(const PlayerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerRequest::~PlayerRequest() {
  SharedDtor();
}

void PlayerRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PlayerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerRequest_descriptor_;
}

const PlayerRequest& PlayerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

PlayerRequest* PlayerRequest::default_instance_ = NULL;

PlayerRequest* PlayerRequest::New() const {
  return new PlayerRequest;
}

void PlayerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerRequest::MergeFrom(const PlayerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRequest::CopyFrom(const PlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerRequest::Swap(PlayerRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerRequest_descriptor_;
  metadata.reflection = PlayerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerConfirmation::kIdFieldNumber;
#endif  // !_MSC_VER

PlayerConfirmation::PlayerConfirmation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerConfirmation::InitAsDefaultInstance() {
}

PlayerConfirmation::PlayerConfirmation(const PlayerConfirmation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerConfirmation::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerConfirmation::~PlayerConfirmation() {
  SharedDtor();
}

void PlayerConfirmation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerConfirmation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerConfirmation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerConfirmation_descriptor_;
}

const PlayerConfirmation& PlayerConfirmation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

PlayerConfirmation* PlayerConfirmation::default_instance_ = NULL;

PlayerConfirmation* PlayerConfirmation::New() const {
  return new PlayerConfirmation;
}

void PlayerConfirmation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerConfirmation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerConfirmation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerConfirmation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerConfirmation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerConfirmation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerConfirmation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerConfirmation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerConfirmation::MergeFrom(const PlayerConfirmation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerConfirmation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerConfirmation::CopyFrom(const PlayerConfirmation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerConfirmation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerConfirmation::Swap(PlayerConfirmation* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerConfirmation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerConfirmation_descriptor_;
  metadata.reflection = PlayerConfirmation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerState::kIdFieldNumber;
const int PlayerState::kPositionFieldNumber;
const int PlayerState::kPossessionFieldNumber;
const int PlayerState::kTargetVelocityFieldNumber;
const int PlayerState::kAvatarFieldNumber;
const int PlayerState::kNameFieldNumber;
const int PlayerState::kTeamTypeFieldNumber;
#endif  // !_MSC_VER

PlayerState::PlayerState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerState::InitAsDefaultInstance() {
  position_ = const_cast< ::NetProtocol::Vector3*>(&::NetProtocol::Vector3::default_instance());
  targetvelocity_ = const_cast< ::NetProtocol::Vector3*>(&::NetProtocol::Vector3::default_instance());
}

PlayerState::PlayerState(const PlayerState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerState::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  position_ = NULL;
  possession_ = 0u;
  targetvelocity_ = NULL;
  avatar_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  team_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerState::~PlayerState() {
  SharedDtor();
}

void PlayerState::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete position_;
    delete targetvelocity_;
  }
}

void PlayerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerState_descriptor_;
}

const PlayerState& PlayerState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

PlayerState* PlayerState::default_instance_ = NULL;

PlayerState* PlayerState::New() const {
  return new PlayerState;
}

void PlayerState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_position()) {
      if (position_ != NULL) position_->::NetProtocol::Vector3::Clear();
    }
    possession_ = 0u;
    if (has_targetvelocity()) {
      if (targetvelocity_ != NULL) targetvelocity_->::NetProtocol::Vector3::Clear();
    }
    avatar_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    team_type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // required .NetProtocol.Vector3 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_possession;
        break;
      }

      // required uint32 possession = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_possession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &possession_)));
          set_has_possession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_targetVelocity;
        break;
      }

      // required .NetProtocol.Vector3 targetVelocity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetVelocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetvelocity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_avatar;
        break;
      }

      // optional uint32 avatar = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_)));
          set_has_avatar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_team_type;
        break;
      }

      // optional uint32 team_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_type_)));
          set_has_team_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .NetProtocol.Vector3 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  // required uint32 possession = 3;
  if (has_possession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->possession(), output);
  }

  // required .NetProtocol.Vector3 targetVelocity = 4;
  if (has_targetvelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->targetvelocity(), output);
  }

  // optional uint32 avatar = 5;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->avatar(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }

  // optional uint32 team_type = 7;
  if (has_team_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->team_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .NetProtocol.Vector3 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  // required uint32 possession = 3;
  if (has_possession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->possession(), target);
  }

  // required .NetProtocol.Vector3 targetVelocity = 4;
  if (has_targetvelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->targetvelocity(), target);
  }

  // optional uint32 avatar = 5;
  if (has_avatar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->avatar(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional uint32 team_type = 7;
  if (has_team_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->team_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .NetProtocol.Vector3 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required uint32 possession = 3;
    if (has_possession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->possession());
    }

    // required .NetProtocol.Vector3 targetVelocity = 4;
    if (has_targetvelocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetvelocity());
    }

    // optional uint32 avatar = 5;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatar());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 team_type = 7;
    if (has_team_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerState::MergeFrom(const PlayerState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_position()) {
      mutable_position()->::NetProtocol::Vector3::MergeFrom(from.position());
    }
    if (from.has_possession()) {
      set_possession(from.possession());
    }
    if (from.has_targetvelocity()) {
      mutable_targetvelocity()->::NetProtocol::Vector3::MergeFrom(from.targetvelocity());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_team_type()) {
      set_team_type(from.team_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerState::CopyFrom(const PlayerState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerState::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_targetvelocity()) {
    if (!this->targetvelocity().IsInitialized()) return false;
  }
  return true;
}

void PlayerState::Swap(PlayerState* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(position_, other->position_);
    std::swap(possession_, other->possession_);
    std::swap(targetvelocity_, other->targetvelocity_);
    std::swap(avatar_, other->avatar_);
    std::swap(name_, other->name_);
    std::swap(team_type_, other->team_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerState_descriptor_;
  metadata.reflection = PlayerState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BallState::kIdFieldNumber;
const int BallState::kPositionFieldNumber;
const int BallState::kVelocityFieldNumber;
const int BallState::kIsActiveFieldNumber;
#endif  // !_MSC_VER

BallState::BallState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BallState::InitAsDefaultInstance() {
  position_ = const_cast< ::NetProtocol::Vector3*>(&::NetProtocol::Vector3::default_instance());
  velocity_ = const_cast< ::NetProtocol::Vector3*>(&::NetProtocol::Vector3::default_instance());
}

BallState::BallState(const BallState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BallState::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  position_ = NULL;
  velocity_ = NULL;
  isactive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BallState::~BallState() {
  SharedDtor();
}

void BallState::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete velocity_;
  }
}

void BallState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BallState_descriptor_;
}

const BallState& BallState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

BallState* BallState::default_instance_ = NULL;

BallState* BallState::New() const {
  return new BallState;
}

void BallState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_position()) {
      if (position_ != NULL) position_->::NetProtocol::Vector3::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::NetProtocol::Vector3::Clear();
    }
    isactive_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BallState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // required .NetProtocol.Vector3 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_velocity;
        break;
      }

      // required .NetProtocol.Vector3 velocity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isActive;
        break;
      }

      // required bool isActive = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BallState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .NetProtocol.Vector3 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }

  // required .NetProtocol.Vector3 velocity = 3;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->velocity(), output);
  }

  // required bool isActive = 4;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isactive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BallState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .NetProtocol.Vector3 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }

  // required .NetProtocol.Vector3 velocity = 3;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->velocity(), target);
  }

  // required bool isActive = 4;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isactive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BallState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .NetProtocol.Vector3 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // required .NetProtocol.Vector3 velocity = 3;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }

    // required bool isActive = 4;
    if (has_isactive()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BallState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BallState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BallState::MergeFrom(const BallState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_position()) {
      mutable_position()->::NetProtocol::Vector3::MergeFrom(from.position());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::NetProtocol::Vector3::MergeFrom(from.velocity());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BallState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallState::CopyFrom(const BallState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallState::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity().IsInitialized()) return false;
  }
  return true;
}

void BallState::Swap(BallState* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(position_, other->position_);
    std::swap(velocity_, other->velocity_);
    std::swap(isactive_, other->isactive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BallState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BallState_descriptor_;
  metadata.reflection = BallState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameState::kPlayerStateFieldNumber;
const int GameState::kRedPointsFieldNumber;
const int GameState::kBluePointsFieldNumber;
const int GameState::kBallStateFieldNumber;
#endif  // !_MSC_VER

GameState::GameState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameState::InitAsDefaultInstance() {
}

GameState::GameState(const GameState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameState::SharedCtor() {
  _cached_size_ = 0;
  redpoints_ = 0u;
  bluepoints_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameState::~GameState() {
  SharedDtor();
}

void GameState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameState_descriptor_;
}

const GameState& GameState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

GameState* GameState::default_instance_ = NULL;

GameState* GameState::New() const {
  return new GameState;
}

void GameState::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    redpoints_ = 0u;
    bluepoints_ = 0u;
  }
  player_state_.Clear();
  ball_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NetProtocol.PlayerState player_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_player_state;
        if (input->ExpectTag(16)) goto parse_redPoints;
        break;
      }

      // required uint32 redPoints = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redPoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redpoints_)));
          set_has_redpoints();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bluePoints;
        break;
      }

      // required uint32 bluePoints = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bluePoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bluepoints_)));
          set_has_bluepoints();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ball_state;
        break;
      }

      // repeated .NetProtocol.BallState ball_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ball_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ball_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ball_state;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NetProtocol.PlayerState player_state = 1;
  for (int i = 0; i < this->player_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_state(i), output);
  }

  // required uint32 redPoints = 2;
  if (has_redpoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->redpoints(), output);
  }

  // required uint32 bluePoints = 3;
  if (has_bluepoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bluepoints(), output);
  }

  // repeated .NetProtocol.BallState ball_state = 4;
  for (int i = 0; i < this->ball_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ball_state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NetProtocol.PlayerState player_state = 1;
  for (int i = 0; i < this->player_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_state(i), target);
  }

  // required uint32 redPoints = 2;
  if (has_redpoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->redpoints(), target);
  }

  // required uint32 bluePoints = 3;
  if (has_bluepoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bluepoints(), target);
  }

  // repeated .NetProtocol.BallState ball_state = 4;
  for (int i = 0; i < this->ball_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ball_state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 redPoints = 2;
    if (has_redpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->redpoints());
    }

    // required uint32 bluePoints = 3;
    if (has_bluepoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bluepoints());
    }

  }
  // repeated .NetProtocol.PlayerState player_state = 1;
  total_size += 1 * this->player_state_size();
  for (int i = 0; i < this->player_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_state(i));
  }

  // repeated .NetProtocol.BallState ball_state = 4;
  total_size += 1 * this->ball_state_size();
  for (int i = 0; i < this->ball_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ball_state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameState::MergeFrom(const GameState& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_state_.MergeFrom(from.player_state_);
  ball_state_.MergeFrom(from.ball_state_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_redpoints()) {
      set_redpoints(from.redpoints());
    }
    if (from.has_bluepoints()) {
      set_bluepoints(from.bluepoints());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState::CopyFrom(const GameState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < player_state_size(); i++) {
    if (!this->player_state(i).IsInitialized()) return false;
  }
  for (int i = 0; i < ball_state_size(); i++) {
    if (!this->ball_state(i).IsInitialized()) return false;
  }
  return true;
}

void GameState::Swap(GameState* other) {
  if (other != this) {
    player_state_.Swap(&other->player_state_);
    std::swap(redpoints_, other->redpoints_);
    std::swap(bluepoints_, other->bluepoints_);
    ball_state_.Swap(&other->ball_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameState_descriptor_;
  metadata.reflection = GameState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerEvent::kIdFieldNumber;
const int PlayerEvent::kTargetVelocityFieldNumber;
#endif  // !_MSC_VER

PlayerEvent::PlayerEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerEvent::InitAsDefaultInstance() {
  targetvelocity_ = const_cast< ::NetProtocol::Vector3*>(&::NetProtocol::Vector3::default_instance());
}

PlayerEvent::PlayerEvent(const PlayerEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEvent::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  targetvelocity_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEvent::~PlayerEvent() {
  SharedDtor();
}

void PlayerEvent::SharedDtor() {
  if (this != default_instance_) {
    delete targetvelocity_;
  }
}

void PlayerEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEvent_descriptor_;
}

const PlayerEvent& PlayerEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

PlayerEvent* PlayerEvent::default_instance_ = NULL;

PlayerEvent* PlayerEvent::New() const {
  return new PlayerEvent;
}

void PlayerEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_targetvelocity()) {
      if (targetvelocity_ != NULL) targetvelocity_->::NetProtocol::Vector3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_targetVelocity;
        break;
      }

      // required .NetProtocol.Vector3 targetVelocity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetVelocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetvelocity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .NetProtocol.Vector3 targetVelocity = 2;
  if (has_targetvelocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->targetvelocity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .NetProtocol.Vector3 targetVelocity = 2;
  if (has_targetvelocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->targetvelocity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .NetProtocol.Vector3 targetVelocity = 2;
    if (has_targetvelocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetvelocity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerEvent::MergeFrom(const PlayerEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_targetvelocity()) {
      mutable_targetvelocity()->::NetProtocol::Vector3::MergeFrom(from.targetvelocity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEvent::CopyFrom(const PlayerEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_targetvelocity()) {
    if (!this->targetvelocity().IsInitialized()) return false;
  }
  return true;
}

void PlayerEvent::Swap(PlayerEvent* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(targetvelocity_, other->targetvelocity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerEvent_descriptor_;
  metadata.reflection = PlayerEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpawnBall::kIdFieldNumber;
const int SpawnBall::kImpulseFieldNumber;
const int SpawnBall::kPositionFieldNumber;
#endif  // !_MSC_VER

SpawnBall::SpawnBall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpawnBall::InitAsDefaultInstance() {
  impulse_ = const_cast< ::NetProtocol::Vector3*>(&::NetProtocol::Vector3::default_instance());
  position_ = const_cast< ::NetProtocol::Vector3*>(&::NetProtocol::Vector3::default_instance());
}

SpawnBall::SpawnBall(const SpawnBall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpawnBall::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  impulse_ = NULL;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpawnBall::~SpawnBall() {
  SharedDtor();
}

void SpawnBall::SharedDtor() {
  if (this != default_instance_) {
    delete impulse_;
    delete position_;
  }
}

void SpawnBall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpawnBall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpawnBall_descriptor_;
}

const SpawnBall& SpawnBall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

SpawnBall* SpawnBall::default_instance_ = NULL;

SpawnBall* SpawnBall::New() const {
  return new SpawnBall;
}

void SpawnBall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_impulse()) {
      if (impulse_ != NULL) impulse_->::NetProtocol::Vector3::Clear();
    }
    if (has_position()) {
      if (position_ != NULL) position_->::NetProtocol::Vector3::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpawnBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_impulse;
        break;
      }

      // required .NetProtocol.Vector3 impulse = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_impulse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_impulse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }

      // required .NetProtocol.Vector3 position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpawnBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .NetProtocol.Vector3 impulse = 2;
  if (has_impulse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->impulse(), output);
  }

  // required .NetProtocol.Vector3 position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpawnBall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .NetProtocol.Vector3 impulse = 2;
  if (has_impulse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->impulse(), target);
  }

  // required .NetProtocol.Vector3 position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpawnBall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required .NetProtocol.Vector3 impulse = 2;
    if (has_impulse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->impulse());
    }

    // required .NetProtocol.Vector3 position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpawnBall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpawnBall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpawnBall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpawnBall::MergeFrom(const SpawnBall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_impulse()) {
      mutable_impulse()->::NetProtocol::Vector3::MergeFrom(from.impulse());
    }
    if (from.has_position()) {
      mutable_position()->::NetProtocol::Vector3::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpawnBall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpawnBall::CopyFrom(const SpawnBall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnBall::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_impulse()) {
    if (!this->impulse().IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void SpawnBall::Swap(SpawnBall* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(impulse_, other->impulse_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpawnBall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpawnBall_descriptor_;
  metadata.reflection = SpawnBall_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* FieldEvent_EventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldEvent_EventType_descriptor_;
}
bool FieldEvent_EventType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FieldEvent_EventType FieldEvent::PLAYER_EVENT;
const FieldEvent_EventType FieldEvent::SPAWN_BALL;
const FieldEvent_EventType FieldEvent::EventType_MIN;
const FieldEvent_EventType FieldEvent::EventType_MAX;
const int FieldEvent::EventType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int FieldEvent::kTypeFieldNumber;
const int FieldEvent::kPlayerEventFieldNumber;
const int FieldEvent::kSpawnBallFieldNumber;
#endif  // !_MSC_VER

FieldEvent::FieldEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FieldEvent::InitAsDefaultInstance() {
  player_event_ = const_cast< ::NetProtocol::PlayerEvent*>(&::NetProtocol::PlayerEvent::default_instance());
  spawn_ball_ = const_cast< ::NetProtocol::SpawnBall*>(&::NetProtocol::SpawnBall::default_instance());
}

FieldEvent::FieldEvent(const FieldEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FieldEvent::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  player_event_ = NULL;
  spawn_ball_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FieldEvent::~FieldEvent() {
  SharedDtor();
}

void FieldEvent::SharedDtor() {
  if (this != default_instance_) {
    delete player_event_;
    delete spawn_ball_;
  }
}

void FieldEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FieldEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FieldEvent_descriptor_;
}

const FieldEvent& FieldEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

FieldEvent* FieldEvent::default_instance_ = NULL;

FieldEvent* FieldEvent::New() const {
  return new FieldEvent;
}

void FieldEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_player_event()) {
      if (player_event_ != NULL) player_event_->::NetProtocol::PlayerEvent::Clear();
    }
    if (has_spawn_ball()) {
      if (spawn_ball_ != NULL) spawn_ball_->::NetProtocol::SpawnBall::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FieldEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NetProtocol.FieldEvent.EventType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProtocol::FieldEvent_EventType_IsValid(value)) {
            set_type(static_cast< ::NetProtocol::FieldEvent_EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_event;
        break;
      }

      // optional .NetProtocol.PlayerEvent player_event = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_spawn_ball;
        break;
      }

      // optional .NetProtocol.SpawnBall spawn_ball = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spawn_ball:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spawn_ball()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FieldEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NetProtocol.FieldEvent.EventType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .NetProtocol.PlayerEvent player_event = 2;
  if (has_player_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->player_event(), output);
  }

  // optional .NetProtocol.SpawnBall spawn_ball = 3;
  if (has_spawn_ball()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->spawn_ball(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FieldEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NetProtocol.FieldEvent.EventType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .NetProtocol.PlayerEvent player_event = 2;
  if (has_player_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->player_event(), target);
  }

  // optional .NetProtocol.SpawnBall spawn_ball = 3;
  if (has_spawn_ball()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->spawn_ball(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FieldEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NetProtocol.FieldEvent.EventType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .NetProtocol.PlayerEvent player_event = 2;
    if (has_player_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_event());
    }

    // optional .NetProtocol.SpawnBall spawn_ball = 3;
    if (has_spawn_ball()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spawn_ball());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FieldEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FieldEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FieldEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FieldEvent::MergeFrom(const FieldEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_player_event()) {
      mutable_player_event()->::NetProtocol::PlayerEvent::MergeFrom(from.player_event());
    }
    if (from.has_spawn_ball()) {
      mutable_spawn_ball()->::NetProtocol::SpawnBall::MergeFrom(from.spawn_ball());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FieldEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldEvent::CopyFrom(const FieldEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_player_event()) {
    if (!this->player_event().IsInitialized()) return false;
  }
  if (has_spawn_ball()) {
    if (!this->spawn_ball().IsInitialized()) return false;
  }
  return true;
}

void FieldEvent::Swap(FieldEvent* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(player_event_, other->player_event_);
    std::swap(spawn_ball_, other->spawn_ball_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FieldEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FieldEvent_descriptor_;
  metadata.reflection = FieldEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Error::kErrorCodeFieldNumber;
const int Error::kErrorMsgFieldNumber;
#endif  // !_MSC_VER

Error::Error()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Error::InitAsDefaultInstance() {
}

Error::Error(const Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Error::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0u;
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Error::~Error() {
  SharedDtor();
}

void Error::SharedDtor() {
  if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errormsg_;
  }
  if (this != default_instance_) {
  }
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_descriptor_;
}

const Error& Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

Error* Error::default_instance_ = NULL;

Error* Error::New() const {
  return new Error;
}

void Error::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0u;
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::kEmptyString) {
        errormsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 errorCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_errorMsg;
        break;
      }

      // required string errorMsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 errorCode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errorcode(), output);
  }

  // required string errorMsg = 2;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errormsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 errorCode = 1;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errorcode(), target);
  }

  // required string errorMsg = 2;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errormsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 errorCode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

    // required string errorMsg = 2;
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Error::Swap(Error* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Error_descriptor_;
  metadata.reflection = Error_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NetPacket_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetPacket_Type_descriptor_;
}
bool NetPacket_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NetPacket_Type NetPacket::VECTOR3;
const NetPacket_Type NetPacket::PLAYER_REQUEST;
const NetPacket_Type NetPacket::PLAYER_CONFIRMATION;
const NetPacket_Type NetPacket::ERROR_PKT;
const NetPacket_Type NetPacket::GAME_STATE;
const NetPacket_Type NetPacket::FIELD_EVENT;
const NetPacket_Type NetPacket::Type_MIN;
const NetPacket_Type NetPacket::Type_MAX;
const int NetPacket::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NetPacket::kTypeFieldNumber;
const int NetPacket::kVector3FieldNumber;
const int NetPacket::kPlayerRequestFieldNumber;
const int NetPacket::kPlayerConfirmationFieldNumber;
const int NetPacket::kErrorFieldNumber;
const int NetPacket::kGameStateFieldNumber;
const int NetPacket::kFieldEventFieldNumber;
#endif  // !_MSC_VER

NetPacket::NetPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetPacket::InitAsDefaultInstance() {
  vector3_ = const_cast< ::NetProtocol::Vector3*>(&::NetProtocol::Vector3::default_instance());
  player_request_ = const_cast< ::NetProtocol::PlayerRequest*>(&::NetProtocol::PlayerRequest::default_instance());
  player_confirmation_ = const_cast< ::NetProtocol::PlayerConfirmation*>(&::NetProtocol::PlayerConfirmation::default_instance());
  error_ = const_cast< ::NetProtocol::Error*>(&::NetProtocol::Error::default_instance());
  game_state_ = const_cast< ::NetProtocol::GameState*>(&::NetProtocol::GameState::default_instance());
  field_event_ = const_cast< ::NetProtocol::FieldEvent*>(&::NetProtocol::FieldEvent::default_instance());
}

NetPacket::NetPacket(const NetPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetPacket::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  vector3_ = NULL;
  player_request_ = NULL;
  player_confirmation_ = NULL;
  error_ = NULL;
  game_state_ = NULL;
  field_event_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetPacket::~NetPacket() {
  SharedDtor();
}

void NetPacket::SharedDtor() {
  if (this != default_instance_) {
    delete vector3_;
    delete player_request_;
    delete player_confirmation_;
    delete error_;
    delete game_state_;
    delete field_event_;
  }
}

void NetPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetPacket_descriptor_;
}

const NetPacket& NetPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

NetPacket* NetPacket::default_instance_ = NULL;

NetPacket* NetPacket::New() const {
  return new NetPacket;
}

void NetPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_vector3()) {
      if (vector3_ != NULL) vector3_->::NetProtocol::Vector3::Clear();
    }
    if (has_player_request()) {
      if (player_request_ != NULL) player_request_->::NetProtocol::PlayerRequest::Clear();
    }
    if (has_player_confirmation()) {
      if (player_confirmation_ != NULL) player_confirmation_->::NetProtocol::PlayerConfirmation::Clear();
    }
    if (has_error()) {
      if (error_ != NULL) error_->::NetProtocol::Error::Clear();
    }
    if (has_game_state()) {
      if (game_state_ != NULL) game_state_->::NetProtocol::GameState::Clear();
    }
    if (has_field_event()) {
      if (field_event_ != NULL) field_event_->::NetProtocol::FieldEvent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NetProtocol.NetPacket.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NetProtocol::NetPacket_Type_IsValid(value)) {
            set_type(static_cast< ::NetProtocol::NetPacket_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vector3;
        break;
      }

      // optional .NetProtocol.Vector3 vector3 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vector3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vector3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_request;
        break;
      }

      // optional .NetProtocol.PlayerRequest player_request = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_confirmation;
        break;
      }

      // optional .NetProtocol.PlayerConfirmation player_confirmation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_confirmation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_confirmation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_error;
        break;
      }

      // optional .NetProtocol.Error error = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_game_state;
        break;
      }

      // optional .NetProtocol.GameState game_state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_field_event;
        break;
      }

      // optional .NetProtocol.FieldEvent field_event = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_field_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NetProtocol.NetPacket.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .NetProtocol.Vector3 vector3 = 2;
  if (has_vector3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vector3(), output);
  }

  // optional .NetProtocol.PlayerRequest player_request = 3;
  if (has_player_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_request(), output);
  }

  // optional .NetProtocol.PlayerConfirmation player_confirmation = 4;
  if (has_player_confirmation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_confirmation(), output);
  }

  // optional .NetProtocol.Error error = 5;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->error(), output);
  }

  // optional .NetProtocol.GameState game_state = 6;
  if (has_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->game_state(), output);
  }

  // optional .NetProtocol.FieldEvent field_event = 7;
  if (has_field_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->field_event(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NetProtocol.NetPacket.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .NetProtocol.Vector3 vector3 = 2;
  if (has_vector3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vector3(), target);
  }

  // optional .NetProtocol.PlayerRequest player_request = 3;
  if (has_player_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_request(), target);
  }

  // optional .NetProtocol.PlayerConfirmation player_confirmation = 4;
  if (has_player_confirmation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player_confirmation(), target);
  }

  // optional .NetProtocol.Error error = 5;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->error(), target);
  }

  // optional .NetProtocol.GameState game_state = 6;
  if (has_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->game_state(), target);
  }

  // optional .NetProtocol.FieldEvent field_event = 7;
  if (has_field_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->field_event(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NetProtocol.NetPacket.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .NetProtocol.Vector3 vector3 = 2;
    if (has_vector3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vector3());
    }

    // optional .NetProtocol.PlayerRequest player_request = 3;
    if (has_player_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_request());
    }

    // optional .NetProtocol.PlayerConfirmation player_confirmation = 4;
    if (has_player_confirmation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_confirmation());
    }

    // optional .NetProtocol.Error error = 5;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->error());
    }

    // optional .NetProtocol.GameState game_state = 6;
    if (has_game_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_state());
    }

    // optional .NetProtocol.FieldEvent field_event = 7;
    if (has_field_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field_event());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetPacket::MergeFrom(const NetPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_vector3()) {
      mutable_vector3()->::NetProtocol::Vector3::MergeFrom(from.vector3());
    }
    if (from.has_player_request()) {
      mutable_player_request()->::NetProtocol::PlayerRequest::MergeFrom(from.player_request());
    }
    if (from.has_player_confirmation()) {
      mutable_player_confirmation()->::NetProtocol::PlayerConfirmation::MergeFrom(from.player_confirmation());
    }
    if (from.has_error()) {
      mutable_error()->::NetProtocol::Error::MergeFrom(from.error());
    }
    if (from.has_game_state()) {
      mutable_game_state()->::NetProtocol::GameState::MergeFrom(from.game_state());
    }
    if (from.has_field_event()) {
      mutable_field_event()->::NetProtocol::FieldEvent::MergeFrom(from.field_event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetPacket::CopyFrom(const NetPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_vector3()) {
    if (!this->vector3().IsInitialized()) return false;
  }
  if (has_player_request()) {
    if (!this->player_request().IsInitialized()) return false;
  }
  if (has_player_confirmation()) {
    if (!this->player_confirmation().IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error().IsInitialized()) return false;
  }
  if (has_game_state()) {
    if (!this->game_state().IsInitialized()) return false;
  }
  if (has_field_event()) {
    if (!this->field_event().IsInitialized()) return false;
  }
  return true;
}

void NetPacket::Swap(NetPacket* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(vector3_, other->vector3_);
    std::swap(player_request_, other->player_request_);
    std::swap(player_confirmation_, other->player_confirmation_);
    std::swap(error_, other->error_);
    std::swap(game_state_, other->game_state_);
    std::swap(field_event_, other->field_event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetPacket_descriptor_;
  metadata.reflection = NetPacket_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NetProtocol

// @@protoc_insertion_point(global_scope)
